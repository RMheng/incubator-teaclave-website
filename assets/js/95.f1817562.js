(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{477:function(e,t,n){"use strict";n.r(t);var r=n(27),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"development-tips"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#development-tips"}},[e._v("#")]),e._v(" Development Tips")]),e._v(" "),n("h2",{attrs:{id:"rls-rust-analyzer-and-ides"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rls-rust-analyzer-and-ides"}},[e._v("#")]),e._v(" RLS/rust-analyzer and IDEs")]),e._v(" "),n("p",[e._v("The most common question on developing Teaclave is how to use Rust IDEs to\nimprove the development experience, e.g., code completions, type hints and cross\nreferences. Internally, these features are supported by either\n"),n("a",{attrs:{href:"https://github.com/rust-lang/rls",target:"_blank",rel:"noopener noreferrer"}},[e._v("RLS"),n("OutboundLink")],1),e._v(" or\n"),n("a",{attrs:{href:"https://github.com/rust-analyzer/rust-analyzer",target:"_blank",rel:"noopener noreferrer"}},[e._v("rust-analyzer"),n("OutboundLink")],1),e._v(". Unfortunately,\nthese features are not supported in Teaclave's codebase out-of-box.\nThe reason is that Teaclave has components targeting different environments (SGX\nenclave and Linux app) which need different set of dependencies (SGX crates and\nvanilla crates). To support this flexible building and linking process, we are\nusing cmake for our "),n("RouterLink",{attrs:{to:"/teaclave/docs/build-system.html"}},[e._v("build system")]),e._v(". However, there are still\nways to workaround and let the analyzer understand the project structures.")],1),e._v(" "),n("p",[e._v("When developing SGX enclaves and corresponding dependent crates, you need to\nprepare a "),n("code",[e._v("Cargo.toml")]),e._v(" in the root directory to help the analyzer. This\n"),n("code",[e._v("Cargo.toml")]),e._v(" file can be copied from our build system:\n"),n("code",[e._v("cmake/tomls/Cargo.sgx_trusted_lib.toml")]),e._v(". Similarly, when developing the app\nparts, you can copy the "),n("code",[e._v("cmake/tomls/Cargo.sgx_untrusted_lib.toml")]),e._v(" file to the\nroot directory as "),n("code",[e._v("Cargo.toml")]),e._v(". For standalone Rust applications such as CLI, no\n"),n("code",[e._v("Cargo.toml")]),e._v(" is needed. After the preparation of "),n("code",[e._v("Cargo.toml")]),e._v(" in root,\nRLS/rust-analyzer can understand the projects finally. You will see type hints\nand cross references using IDEs with extensions.")]),e._v(" "),n("h2",{attrs:{id:"logging"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[e._v("#")]),e._v(" Logging")]),e._v(" "),n("p",[e._v("Teaclave utilizes the "),n("a",{attrs:{href:"https://github.com/sebasmagri/env_logger/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("env_logger")]),n("OutboundLink")],1),e._v("\ncrate to configure the display of "),n("em",[e._v("debug logs")]),e._v(" via environment variables.")]),e._v(" "),n("p",[e._v("Logging is controlled via the "),n("code",[e._v("TEACLAVE_LOG")]),e._v(" environment variables and the value\nof this variable is a comma-separated list of logging directives in the\n"),n("code",[e._v("parth::to::module=level")]),e._v(" form. For example, you can set the environment\n"),n("code",[e._v("TEACLAVE_LOG=attestation=debug")]),e._v(" before launching a service to print the debug\nlevel (and higher-level) logs in the "),n("code",[e._v("attestation")]),e._v(" module to stdout/stderr.\nThere are five logging levels: "),n("code",[e._v("error")]),e._v(", "),n("code",[e._v("warn")]),e._v(", "),n("code",[e._v("info")]),e._v(", "),n("code",[e._v("debug")]),e._v(" and "),n("code",[e._v("trace")]),e._v("\nwhere error represents the highest-priority log level. Furthermore, you can also\nfilter the results with regular expression by simply put "),n("code",[e._v("/")]),e._v(" followed by a regex\nin the directives in the environment variable. You can find more filter usages\nin the "),n("code",[e._v("env_logger")]),e._v("'s\n"),n("a",{attrs:{href:"https://docs.rs/env_logger/0.7.1/env_logger/index.html#filtering-results",target:"_blank",rel:"noopener noreferrer"}},[e._v("document"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),n("p",[e._v("To prevent sensitive information leakage through logging, for the release build,\nwe disable all logging (at build time) lower than the "),n("code",[e._v("info")]),e._v(" level. That is,\nonly "),n("code",[e._v("error")]),e._v(", "),n("code",[e._v("warn")]),e._v(" and "),n("code",[e._v("info")]),e._v(" logs will be printed.")])])])}),[],!1,null,null,null);t.default=o.exports}}]);