(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{432:function(t,a,s){"use strict";s.r(a);var e=s(27),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"tcmalloc-code-sample"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcmalloc-code-sample"}},[t._v("#")]),t._v(" tcmalloc code sample")]),t._v(" "),s("p",[t._v("This example shows how to use tcmalloc in rust-sgx enclaves.")]),t._v(" "),s("p",[t._v("This tcmalloc is provided by Intel and located at "),s("code",[t._v("${SGXSDK}/lib64/libsgx_tcmalloc.a")]),t._v(". To link against tcmalloc, the following link flag is required, and placed before link flag of "),s("code",[t._v("-lsgx_tstdc")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("-Wl,--whole-archive -lsgx_tcmalloc -Wl,--no-whole-archive\n")])])]),s("h2",{attrs:{id:"one-shot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#one-shot"}},[t._v("#")]),t._v(" One shot")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ make TCMALLOC=1\n")])])]),s("p",[t._v("This would enable the linking flag "),s("code",[t._v("-lsgx_tcmalloc")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ make\n")])])]),s("p",[t._v("This would use the default 'dlmalloc'.")]),t._v(" "),s("h2",{attrs:{id:"comparison-with-traditional-allocator-dlmalloc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#comparison-with-traditional-allocator-dlmalloc"}},[t._v("#")]),t._v(" Comparison with traditional allocator (dlmalloc)")]),t._v(" "),s("p",[t._v("We provide a sample workload which only allocate buffers:")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("recursive_memory_func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" multiplier"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" u64 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("u64"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("with_capacity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" multiplier"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" usize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u64 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("as_ptr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" u64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//println!("ptr = {:X}", p);')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("recursive_memory_func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" multiplier"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Small buffer test settings: "),s("code",[t._v("multiplier = 1")]),t._v(" and initiate "),s("code",[t._v("x = 2000")]),t._v(".")]),t._v(" "),s("p",[t._v("Large buffer test settings: "),s("code",[t._v("multiplier = 100")]),t._v(" and initiate "),s("code",[t._v("x = 1000")]),t._v(".")]),t._v(" "),s("p",[t._v("Please test the performance by yourself. Here is my result (i9-9900k, DDR4-3200):")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("dlmalloc")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("tcmalloc")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("small payload (1x size, 2000 depth)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1.306730572s")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("674.858065ms")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("large payload (100x size, 1000 depth)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("874.595932ms")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1.519623607s")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);