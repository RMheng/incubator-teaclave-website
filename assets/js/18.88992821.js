(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{369:function(e,t,a){"use strict";a.r(t);var n=a(25),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"my-first-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#my-first-function"}},[e._v("#")]),e._v(" My First Function")]),e._v(" "),a("p",[e._v("This documentation will guide you through executing your first function on the\nTeaclave platform.")]),e._v(" "),a("h2",{attrs:{id:"prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),a("p",[e._v("To run Teacalve, a hardware with Intel SGX support is needed. You can\ncheck with this list of "),a("a",{attrs:{href:"https://github.com/ayeks/SGX-hardware",target:"_blank",rel:"noopener noreferrer"}},[e._v("supported hardware"),a("OutboundLink")],1),e._v(".\nNote that you need to configure BIOS to enable SGX sometime. Additionally, you\nneed to install driver and platform software to run SGX applications. Details\ncan found in\n"),a("a",{attrs:{href:"https://download.01.org/intel-sgx/sgx-linux/2.9/docs/Intel_SGX_Installation_Guide_Linux_2.9_Open_Source.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Intel SGX Installation Guide"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("If you don't have an SGX supported hardware at hand, Teaclave can also run in\nsimulation mode. However some functions like remote attestation will be disable\nat this mode. Please start from "),a("a",{attrs:{href:"#simulation-mode"}},[e._v("here")]),e._v(" if you plan to try in\nsimulation mode.")]),e._v(" "),a("h2",{attrs:{id:"clone-and-build-teaclave"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clone-and-build-teaclave"}},[e._v("#")]),e._v(" Clone and Build Teaclave")]),e._v(" "),a("p",[e._v("Clone the Teaclave repository:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git clone https://github.com/apache/incubator-teaclave.git\n")])])]),a("p",[e._v("Since the building dependencies is a bit complicated, we suggest to build the\nTeaclave platform with our docker images. You can learn more details about the\nbuilding environment from "),a("code",[e._v("Dockerfile")]),e._v(" under the "),a("a",{attrs:{href:"../docker"}},[a("code",[e._v("docker")])]),e._v("\ndirectory.")]),e._v(" "),a("p",[e._v("Build the Teaclave platform using docker:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$ cd incubator-teaclave\n$ docker run --rm -v $(pwd):/teaclave -w /teaclave \\\n  -it teaclave/teaclave-build-ubuntu-1804-sgx-2.9.1:latest \\\n   bash -c ". /root/.cargo/env && \\\n     . /opt/sgxsdk/environment && \\\n     mkdir -p build && cd build && \\\n     cmake -DTEST_MODE=ON .. && \\\n     make"\n')])])]),a("h2",{attrs:{id:"setup-attestation-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setup-attestation-service"}},[e._v("#")]),e._v(" Setup Attestation Service")]),e._v(" "),a("p",[e._v("For simplicity, we use Intel Attestation Service (IAS) in this tutorial. To get\nstarted, you need to enroll in Intel SGX Attestation Service in\nIntel's "),a("a",{attrs:{href:"https://api.portal.trustedservices.intel.com/EPID-attestation",target:"_blank",rel:"noopener noreferrer"}},[e._v("attestation service portal"),a("OutboundLink")],1),e._v('\nby subscribing the attestation service for development (linkable is preferred).\nThen, you can find "SPID" and "Primary key" in the subscription details for\nlater usage.')]),e._v(" "),a("p",[e._v("There is one more setup if you are using linkable attestation service subscription.\nEdit the "),a("code",[e._v("/etc/aesmd.conf")]),e._v(" file and uncomment\nthe "),a("code",[e._v("default quoting type = epid_linkable")]),e._v(" line to enable linkable quotes for EPID-based attestation service\n(i.e., Intel Attestation Service). At last, the AESM service need to be restarted by\n"),a("code",[e._v("sudo systemctl restart aesmd")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"launch-teaclave-services"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#launch-teaclave-services"}},[e._v("#")]),e._v(" Launch Teaclave Services")]),e._v(" "),a("p",[e._v("Teaclave contains multiple services. To ease the deployment, you can use\n"),a("a",{attrs:{href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker-compose"),a("OutboundLink")],1),e._v(" to manage all services in a\ncontainerized environment.")]),e._v(" "),a("p",[e._v("Setup environment variables:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$ export AS_SPID="00000000000000000000000000000000"  # SPID from IAS subscription\n$ export AS_KEY="00000000000000000000000000000000"   # Primary key/Secondary key from IAS subscription\n$ export AS_ALGO="sgx_epid"                          # Attestation algorithm, sgx_epid for IAS\n$ export AS_URL="https://api.trustedservices.intel.com:443"    # IAS URL\n')])])]),a("p",[e._v("Launch all services with "),a("code",[e._v("docker-compose")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ (cd docker && docker-compose -f docker-compose-ubuntu-1804.yml up --build)\nStarting teaclave-authentication-service ... done\nStarting teaclave-access-control-service ... done\nStarting teaclave-scheduler-service      ... done\nStarting teaclave-management-service     ... done\nStarting teaclave-execution-service      ... done\nStarting teaclave-frontend-service       ... done\nAttaching to ...\n")])])]),a("h2",{attrs:{id:"invoke-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#invoke-function"}},[e._v("#")]),e._v(" Invoke Function")]),e._v(" "),a("p",[e._v("We provide several examples to demonstrating the platform. Let's get started\nwith invoking a built-in function: echo, which is a simple function takes one\ninput message and return it.")]),e._v(" "),a("p",[e._v("This example is written in Python, and some dependencies are needed for the\nremote attestation. They can be installed with "),a("code",[e._v("pip")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ pip3 install pyopenssl toml cryptography\n")])])]),a("p",[e._v("Then, run the echo example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd examples/python\n$ PYTHONPATH=../../sdk/python python3 builtin_echo.py 'Hello, Teaclave!'\n[+] registering user\n[+] login\n[+] registering function\n[+] creating task\n[+] approving task\n[+] invoking task\n[+] getting result\n[+] done\n[+] function return:  b'Hello, Teaclave!'\n")])])]),a("p",[e._v("If you see above log, this means that the function is successfully invoked in\nTeaclave.")]),e._v(" "),a("h2",{attrs:{id:"simulation-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simulation-mode"}},[e._v("#")]),e._v(" Simulation Mode")]),e._v(" "),a("p",[e._v("To try Teaclave in SGX simulation mode, please install Intel SGX SDK first with instructions in\n"),a("a",{attrs:{href:"https://download.01.org/intel-sgx/sgx-linux/2.9/docs/Intel_SGX_Installation_Guide_Linux_2.9_Open_Source.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Intel SGX Installation Guide"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Then clone and build Teaclave (with the "),a("code",[e._v("-DSGX_SIM_MODE=ON")]),e._v(" option in "),a("code",[e._v("cmake")]),e._v(").")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$ git clone https://github.com/apache/incubator-teaclave.git\n$ cd incubator-teaclave\n$ docker run --rm -v $(pwd):/teaclave -w /teaclave \\\n  -it teaclave/teaclave-build-ubuntu-1804-sgx-2.9.1:latest \\\n   bash -c ". /root/.cargo/env && \\\n     . /opt/sgxsdk/environment && \\\n     mkdir -p build && cd build && \\\n     cmake -DTEST_MODE=ON -DSGX_SIM_MODE=ON .. && \\\n     make"\n')])])]),a("p",[e._v("Since the attestation is disabled in the simulation mode, related environment\nvariables can be set to any values.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$ export AS_SPID="00000000000000000000000000000000"\n$ export AS_KEY="00000000000000000000000000000000"\n$ export AS_ALGO="sgx_epid"\n$ export AS_URL="https://api.trustedservices.intel.com:443"\n')])])]),a("p",[e._v("Under the simulation mode, you also need to change the\n"),a("code",[e._v("docker-compose-ubuntu-1804.yml")]),e._v(" file accordingly to remove useless\ndevice/volume mappings which may not exist. That is, comment out these lines for\nall services in the "),a("code",[e._v("docker-compose")]),e._v(" config file:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#      - type: bind\n#        source: /var/run/aesmd/aesm.socket\n#        target: /var/run/aesmd/aesm.socket\n#    devices:\n#      - /dev/isgx\n")])])]),a("p",[e._v("At last, launch all services with "),a("code",[e._v("docker-compose")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ (cd docker && docker-compose -f docker-compose-ubuntu-1804.yml up --build)\n")])])]),a("p",[e._v("In simulation mode, run examples with "),a("code",[e._v("SGX_MODE=SW")]),e._v(" environment variable.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd examples/python\n$ SGX_MODE=SW PYTHONPATH=../../sdk/python python3 builtin_echo.py 'Hello, Teaclave!'\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);