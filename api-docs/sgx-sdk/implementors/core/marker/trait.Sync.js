(function() {var implementors = {};
implementors["hashbrown_tstd"] = [{"text":"impl&lt;K, V, S&gt; Sync for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TryReserveError","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Sync for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawEntryBuilderMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawVacantEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawEntryBuilder&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DefaultHashBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for RustcVacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for RustcEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Sync for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Sync for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Sync for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S, '_&gt; Sync for RawOccupiedEntryMut&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S, '_&gt; Sync for OccupiedEntry&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Sync for RustcOccupiedEntry&lt;'_, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sgx_alloc"] = [{"text":"impl Sync for System","synthetic":true,"types":[]},{"text":"impl Sync for AlignReq","synthetic":true,"types":[]},{"text":"impl Sync for AlignAlloc","synthetic":true,"types":[]},{"text":"impl Sync for AlighAllocErr","synthetic":true,"types":[]},{"text":"impl Sync for AlignLayoutErr","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AlignBox&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RsrvMemAlloc","synthetic":true,"types":[]},{"text":"impl Sync for RsrvMemAllocErr","synthetic":true,"types":[]},{"text":"impl Sync for ProtectAttr","synthetic":true,"types":[]}];
implementors["sgx_backtrace_sys"] = [{"text":"impl Sync for backtrace_state","synthetic":true,"types":[]}];
implementors["sgx_demangle"] = [{"text":"impl&lt;'a&gt; Sync for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TryDemangleError","synthetic":true,"types":[]}];
implementors["sgx_libc"] = [{"text":"impl Sync for stat","synthetic":true,"types":[]},{"text":"impl Sync for stat64","synthetic":true,"types":[]},{"text":"impl Sync for timeval","synthetic":true,"types":[]},{"text":"impl Sync for timespec","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl !Sync for addrinfo","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Sync for fd_set","synthetic":true,"types":[]},{"text":"impl !Sync for tm","synthetic":true,"types":[]},{"text":"impl Sync for epoll_event","synthetic":true,"types":[]},{"text":"impl Sync for in_addr","synthetic":true,"types":[]},{"text":"impl Sync for in6_addr","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreq","synthetic":true,"types":[]},{"text":"impl Sync for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Sync for hostent","synthetic":true,"types":[]},{"text":"impl !Sync for iovec","synthetic":true,"types":[]},{"text":"impl Sync for pollfd","synthetic":true,"types":[]},{"text":"impl Sync for winsize","synthetic":true,"types":[]},{"text":"impl Sync for linger","synthetic":true,"types":[]},{"text":"impl !Sync for sigval","synthetic":true,"types":[]},{"text":"impl !Sync for msghdr","synthetic":true,"types":[]},{"text":"impl Sync for cmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for dirent","synthetic":true,"types":[]},{"text":"impl Sync for dirent64","synthetic":true,"types":[]},{"text":"impl !Sync for passwd","synthetic":true,"types":[]},{"text":"impl Sync for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Sync for ucred","synthetic":true,"types":[]},{"text":"impl !Sync for pthread_once_t","synthetic":true,"types":[]},{"text":"impl Sync for sigset_t","synthetic":true,"types":[]},{"text":"impl Sync for sigaction","synthetic":true,"types":[]},{"text":"impl Sync for siginfo_t","synthetic":true,"types":[]},{"text":"impl Sync for DIR","synthetic":true,"types":[]}];
implementors["sgx_tprotected_fs"] = [{"text":"impl !Sync for SgxFileStream","synthetic":true,"types":[]},{"text":"impl Sync for SeekFrom","synthetic":true,"types":[]}];
implementors["sgx_trts"] = [{"text":"impl Sync for CString","synthetic":true,"types":[]},{"text":"impl Sync for CStr","synthetic":true,"types":[]},{"text":"impl Sync for NulError","synthetic":true,"types":[]},{"text":"impl Sync for FromBytesWithNulError","synthetic":true,"types":[]},{"text":"impl Sync for IntoStringError","synthetic":true,"types":[]},{"text":"impl Sync for Feature","synthetic":true,"types":[]},{"text":"impl Sync for global_data_t","synthetic":true,"types":[]},{"text":"impl Sync for thread_data_t","synthetic":true,"types":[]},{"text":"impl Sync for SgxGlobalData","synthetic":true,"types":[]},{"text":"impl Sync for SgxThreadData","synthetic":true,"types":[]},{"text":"impl Sync for SgxThreadPolicy","synthetic":true,"types":[]}];
implementors["sgx_types"] = [{"text":"impl Sync for sgx_attributes_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_misc_attribute_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_dh_msg1_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_dh_msg2_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_dh_msg3_body_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_dh_msg3_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_dh_session_enclave_identity_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_dh_session_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ecc_param_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_cpu_svn_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_key_id_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_key_request_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ra_msg1_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ra_msg2_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ps_sec_prop_desc_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ra_msg3_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_spid_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_basename_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_quote_nonce_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_update_info_bit_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_quote_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_platform_info_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_att_key_id_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_att_key_id_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_att_key_id_ext_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_qe_report_info_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_measurement_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_report_data_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_target_info_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_report_body_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_report_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ec256_dh_shared_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ec256_private_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ec256_public_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ec256_signature_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_rsa3072_public_key_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_rsa3072_key_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_rsa3072_signature_t","synthetic":true,"types":[]},{"text":"impl Sync for rsa_params_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_thread_queue_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_thread_mutex_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_thread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_thread_mutex_attr_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_thread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_thread_cond_attr_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_thread_cond_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_cpu_context_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_exception_info_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_aes_gcm_data_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_sealed_data_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ps_cap_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_kss_config_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_uswitchless_worker_stats_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_uswitchless_config_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_pce_info_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_qe3_id_t","synthetic":true,"types":[]},{"text":"impl !Sync for sgx_ql_pck_cert_id_t","synthetic":true,"types":[]},{"text":"impl !Sync for sgx_ql_config_t","synthetic":true,"types":[]},{"text":"impl !Sync for sgx_ql_qve_collateral_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_ppid_rsa3072_encrypted_cert_info_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_auth_data_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_certification_data_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_ecdsa_sig_data_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_quote_header_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_quote3_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_qe_report_info_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_qv_supplemental_t","synthetic":true,"types":[]},{"text":"impl Sync for align_req_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_align_key_128bit_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_align_mac_128bit_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_align_key_256bit_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_align_mac_256bit_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_align_ec256_dh_shared_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_align_ec256_private_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_dh_session_role_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ra_key_type_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_quote_sign_type_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_generic_ecresult_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_rsa_result_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_rsa_key_type_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_exception_vector_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_exception_type_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_device_status_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_uswitchless_worker_type_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_uswitchless_worker_event_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_request_policy_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_config_version_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_attestation_algorithm_id_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_cert_key_type_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_path_type_t","synthetic":true,"types":[]},{"text":"impl Sync for pck_cert_flag_enum_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_qv_path_type_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_status_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_pce_error_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_quote3_error_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_qcnl_error_t","synthetic":true,"types":[]},{"text":"impl Sync for sgx_ql_qv_result_t","synthetic":true,"types":[]},{"text":"impl Sync for tcs_t","synthetic":true,"types":[]},{"text":"impl Sync for css_header_t","synthetic":true,"types":[]},{"text":"impl Sync for css_key_t","synthetic":true,"types":[]},{"text":"impl Sync for css_body_t","synthetic":true,"types":[]},{"text":"impl Sync for css_buffer_t","synthetic":true,"types":[]},{"text":"impl Sync for enclave_css_t","synthetic":true,"types":[]},{"text":"impl Sync for data_directory_t","synthetic":true,"types":[]},{"text":"impl Sync for layout_entry_t","synthetic":true,"types":[]},{"text":"impl Sync for layout_group_t","synthetic":true,"types":[]},{"text":"impl Sync for patch_entry_t","synthetic":true,"types":[]},{"text":"impl Sync for metadata_t","synthetic":true,"types":[]},{"text":"impl Sync for layout_t","synthetic":true,"types":[]},{"text":"impl Sync for dir_index_t","synthetic":true,"types":[]}];
implementors["sgx_unwind"] = [{"text":"impl Sync for _Unwind_Exception","synthetic":true,"types":[]},{"text":"impl Sync for _Unwind_Reason_Code","synthetic":true,"types":[]},{"text":"impl Sync for _Unwind_Context","synthetic":true,"types":[]},{"text":"impl Sync for _Unwind_Action","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()