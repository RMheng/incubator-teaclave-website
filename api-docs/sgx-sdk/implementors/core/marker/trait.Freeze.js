(function() {var implementors = {};
implementors["hashbrown_tstd"] = [{"text":"impl&lt;K, V, S&gt; Freeze for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TryReserveError","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Freeze for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilderMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawOccupiedEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawVacantEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilder&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultHashBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for RustcOccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for RustcVacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for RustcEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntoIter&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Drain&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Freeze for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["sgx_alloc"] = [{"text":"impl Freeze for System","synthetic":true,"types":[]},{"text":"impl Freeze for AlignReq","synthetic":true,"types":[]},{"text":"impl Freeze for AlignAlloc","synthetic":true,"types":[]},{"text":"impl Freeze for AlighAllocErr","synthetic":true,"types":[]},{"text":"impl Freeze for AlignLayoutErr","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AlignBox&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RsrvMemAlloc","synthetic":true,"types":[]},{"text":"impl Freeze for RsrvMemAllocErr","synthetic":true,"types":[]},{"text":"impl Freeze for ProtectAttr","synthetic":true,"types":[]}];
implementors["sgx_backtrace_sys"] = [{"text":"impl Freeze for backtrace_state","synthetic":true,"types":[]}];
implementors["sgx_demangle"] = [{"text":"impl&lt;'a&gt; Freeze for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TryDemangleError","synthetic":true,"types":[]}];
implementors["sgx_libc"] = [{"text":"impl Freeze for stat","synthetic":true,"types":[]},{"text":"impl Freeze for stat64","synthetic":true,"types":[]},{"text":"impl Freeze for timeval","synthetic":true,"types":[]},{"text":"impl Freeze for timespec","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Freeze for addrinfo","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Freeze for fd_set","synthetic":true,"types":[]},{"text":"impl Freeze for tm","synthetic":true,"types":[]},{"text":"impl Freeze for epoll_event","synthetic":true,"types":[]},{"text":"impl Freeze for in_addr","synthetic":true,"types":[]},{"text":"impl Freeze for in6_addr","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for hostent","synthetic":true,"types":[]},{"text":"impl Freeze for iovec","synthetic":true,"types":[]},{"text":"impl Freeze for pollfd","synthetic":true,"types":[]},{"text":"impl Freeze for winsize","synthetic":true,"types":[]},{"text":"impl Freeze for linger","synthetic":true,"types":[]},{"text":"impl Freeze for sigval","synthetic":true,"types":[]},{"text":"impl Freeze for msghdr","synthetic":true,"types":[]},{"text":"impl Freeze for cmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for dirent","synthetic":true,"types":[]},{"text":"impl Freeze for dirent64","synthetic":true,"types":[]},{"text":"impl Freeze for passwd","synthetic":true,"types":[]},{"text":"impl Freeze for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Freeze for ucred","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_once_t","synthetic":true,"types":[]},{"text":"impl Freeze for sigset_t","synthetic":true,"types":[]},{"text":"impl Freeze for sigaction","synthetic":true,"types":[]},{"text":"impl Freeze for siginfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for DIR","synthetic":true,"types":[]}];
implementors["sgx_tprotected_fs"] = [{"text":"impl Freeze for SgxFileStream","synthetic":true,"types":[]},{"text":"impl Freeze for SeekFrom","synthetic":true,"types":[]}];
implementors["sgx_trts"] = [{"text":"impl Freeze for CString","synthetic":true,"types":[]},{"text":"impl Freeze for CStr","synthetic":true,"types":[]},{"text":"impl Freeze for NulError","synthetic":true,"types":[]},{"text":"impl Freeze for FromBytesWithNulError","synthetic":true,"types":[]},{"text":"impl Freeze for IntoStringError","synthetic":true,"types":[]},{"text":"impl Freeze for Feature","synthetic":true,"types":[]},{"text":"impl Freeze for global_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for thread_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for SgxGlobalData","synthetic":true,"types":[]},{"text":"impl Freeze for SgxThreadData","synthetic":true,"types":[]},{"text":"impl Freeze for SgxThreadPolicy","synthetic":true,"types":[]}];
implementors["sgx_tstd"] = [{"text":"impl&lt;T&gt; Freeze for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AccessError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Key&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadId","synthetic":true,"types":[]},{"text":"impl Freeze for SgxThread","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Freeze for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Freeze for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoKeys&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoValues&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilderMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawOccupiedEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawVacantEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilder&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RandomState","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultHasher","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntoIter&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Drain&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Freeze for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Vars","synthetic":true,"types":[]},{"text":"impl Freeze for VarsOs","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitPaths&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for JoinPathsError","synthetic":true,"types":[]},{"text":"impl Freeze for VarError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Chain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ErrorIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OsString","synthetic":true,"types":[]},{"text":"impl Freeze for OsStr","synthetic":true,"types":[]},{"text":"impl Freeze for SgxFile","synthetic":true,"types":[]},{"text":"impl Freeze for OpenOptions","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for IntoInnerError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for LineWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Lazy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Stderr","synthetic":true,"types":[]},{"text":"impl Freeze for Stdin","synthetic":true,"types":[]},{"text":"impl Freeze for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StderrLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StdinLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StdoutLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]},{"text":"impl Freeze for Sink","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IoSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Initializer","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Bytes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Split&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Lines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for SeekFrom","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl Freeze for SocketAddrV4","synthetic":true,"types":[]},{"text":"impl Freeze for SocketAddrV6","synthetic":true,"types":[]},{"text":"impl Freeze for AddrParseError","synthetic":true,"types":[]},{"text":"impl Freeze for IpAddr","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6MulticastScope","synthetic":true,"types":[]},{"text":"impl Freeze for SocketAddr","synthetic":true,"types":[]},{"text":"impl Freeze for Shutdown","synthetic":true,"types":[]},{"text":"impl Freeze for stat","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AssertUnwindSafe&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrefixComponent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Components&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Ancestors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PathBuf","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for StripPrefixError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Prefix&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Component&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Barrier","synthetic":true,"types":[]},{"text":"impl Freeze for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxCondvar","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxThreadCondvar","synthetic":true,"types":[]},{"text":"impl Freeze for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SgxMutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for SgxMutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxThreadMutex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SgxReentrantMutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for SgxReentrantMutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxReentrantThreadMutex","synthetic":true,"types":[]},{"text":"impl !Freeze for Once","synthetic":true,"types":[]},{"text":"impl Freeze for OnceState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SgxRwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for SgxRwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for SgxRwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxThreadRwLock","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxSpinlock","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SgxSpinlockGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxThreadSpinlock","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PoisonError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TryLockError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Instant","synthetic":true,"types":[]},{"text":"impl Freeze for SystemTime","synthetic":true,"types":[]},{"text":"impl Freeze for SystemTimeError","synthetic":true,"types":[]},{"text":"impl Freeze for File","synthetic":true,"types":[]},{"text":"impl Freeze for Metadata","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDir","synthetic":true,"types":[]},{"text":"impl Freeze for DirEntry","synthetic":true,"types":[]},{"text":"impl Freeze for OpenOptions","synthetic":true,"types":[]},{"text":"impl Freeze for Permissions","synthetic":true,"types":[]},{"text":"impl Freeze for FileType","synthetic":true,"types":[]},{"text":"impl Freeze for DirBuilder","synthetic":true,"types":[]}];
implementors["sgx_types"] = [{"text":"impl Freeze for sgx_attributes_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_misc_attribute_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_msg1_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_msg2_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_msg3_body_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_msg3_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_session_enclave_identity_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_session_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ecc_param_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_cpu_svn_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_key_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_key_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ra_msg1_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ra_msg2_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ps_sec_prop_desc_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ra_msg3_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_spid_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_basename_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_quote_nonce_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_update_info_bit_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_quote_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_platform_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_att_key_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_att_key_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_att_key_id_ext_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_qe_report_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_measurement_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_report_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_target_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_report_body_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_report_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ec256_dh_shared_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ec256_private_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ec256_public_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ec256_signature_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_rsa3072_public_key_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_rsa3072_key_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_rsa3072_signature_t","synthetic":true,"types":[]},{"text":"impl Freeze for rsa_params_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_queue_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_mutex_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_mutex_attr_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_cond_attr_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_cond_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_cpu_context_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_exception_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_aes_gcm_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_sealed_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ps_cap_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_kss_config_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_uswitchless_worker_stats_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_uswitchless_config_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_pce_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_qe3_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_pck_cert_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_config_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_qve_collateral_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_ppid_rsa3072_encrypted_cert_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_auth_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_certification_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_ecdsa_sig_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_quote_header_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_quote3_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_qe_report_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_qv_supplemental_t","synthetic":true,"types":[]},{"text":"impl Freeze for align_req_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_align_key_128bit_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_align_mac_128bit_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_align_key_256bit_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_align_mac_256bit_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_align_ec256_dh_shared_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_align_ec256_private_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_session_role_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ra_key_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_quote_sign_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_generic_ecresult_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_rsa_result_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_rsa_key_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_exception_vector_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_exception_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_device_status_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_uswitchless_worker_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_uswitchless_worker_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_request_policy_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_config_version_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_attestation_algorithm_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_cert_key_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_path_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for pck_cert_flag_enum_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_qv_path_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_status_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_pce_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_quote3_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_qcnl_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_qv_result_t","synthetic":true,"types":[]},{"text":"impl Freeze for tcs_t","synthetic":true,"types":[]},{"text":"impl Freeze for css_header_t","synthetic":true,"types":[]},{"text":"impl Freeze for css_key_t","synthetic":true,"types":[]},{"text":"impl Freeze for css_body_t","synthetic":true,"types":[]},{"text":"impl Freeze for css_buffer_t","synthetic":true,"types":[]},{"text":"impl Freeze for enclave_css_t","synthetic":true,"types":[]},{"text":"impl Freeze for data_directory_t","synthetic":true,"types":[]},{"text":"impl Freeze for layout_entry_t","synthetic":true,"types":[]},{"text":"impl Freeze for layout_group_t","synthetic":true,"types":[]},{"text":"impl Freeze for patch_entry_t","synthetic":true,"types":[]},{"text":"impl Freeze for metadata_t","synthetic":true,"types":[]},{"text":"impl Freeze for layout_t","synthetic":true,"types":[]},{"text":"impl Freeze for dir_index_t","synthetic":true,"types":[]}];
implementors["sgx_unwind"] = [{"text":"impl Freeze for _Unwind_Exception","synthetic":true,"types":[]},{"text":"impl Freeze for _Unwind_Reason_Code","synthetic":true,"types":[]},{"text":"impl Freeze for _Unwind_Context","synthetic":true,"types":[]},{"text":"impl Freeze for _Unwind_Action","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()